maxTryCounter = 4;
motionSpecificRetrys = 2;
motionSpecificRetrysFront = 1;
shoulderPitchThreshold = 50deg;
motorMalfunctionBreakUp = true;
mofs = {
  doNothing = {
    baseLimbStiffness = [
      0,
      0,
      0,
      0,
      0
    ];
    lines = [];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = doNothing;
    clipAngle = 0deg;
  };
  front = {
    baseLimbStiffness = [
      20,
      40,
      40,
      100,
      100
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          -0,
          -30
        ];
        leftArm = [
          68.5,
          71.9,
          -121.9,
          -4.6,
          -90,
          0
        ];
        rightArm = [
          84.6,
          -72.9,
          120.4,
          6.4,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          -21.3,
          48.9,
          -27.6,
          0
        ];
        rightLeg = [
          0,
          0,
          -21.2,
          49,
          -27.6,
          0
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          -30
        ];
        leftArm = [
          -13.9,
          68.2,
          -122.2,
          -11.1,
          -90,
          0
        ];
        rightArm = [
          -13.5,
          -67.9,
          121.9,
          8,
          90,
          0
        ];
        leftLeg = [
          -3.9,
          -0.2,
          -84.6,
          123.7,
          -52.9,
          2.3
        ];
        rightLeg = [
          -3.9,
          -0.7,
          -80.2,
          122,
          -47.9,
          2.2
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          -30
        ];
        leftArm = [
          -13.9,
          68.2,
          -122.2,
          -65,
          -90,
          0
        ];
        rightArm = [
          -13.5,
          -67.9,
          121.9,
          65,
          90,
          0
        ];
        leftLeg = [
          0.3,
          -1.6,
          -57.6,
          41.7,
          -68,
          4.5
        ];
        rightLeg = [
          0.3,
          -0.6,
          -57.2,
          42.7,
          -68,
          0.3
        ];
      },
      {
        phase = ArmPushing;
        duration = 250;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          -30
        ];
        leftArm = [
          -39.64,
          -3.87,
          -90.62,
          -88.07,
          -87.54,
          0
        ];
        rightArm = [
          -39.39,
          16.61,
          103.36,
          80.51,
          84.37,
          0
        ];
        leftLeg = [
          -28.4,
          -17.52,
          -92.59,
          -7.31,
          -10.54,
          -20.8
        ];
        rightLeg = [
          -28.4,
          17.52,
          -92.59,
          -7.31,
          -10.54,
          20.8
        ];
      },
      {
        phase = ArmPushing;
        duration = 250;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = true;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 10;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 1;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 1;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 70;
            isNot = false;
            maxWaitTime = 410;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [
          {
            joint = lShoulderPitch;
            s = 100;
          },
          {
            joint = lShoulderRoll;
            s = 100;
          },
          {
            joint = lElbowYaw;
            s = 100;
          },
          {
            joint = lElbowRoll;
            s = 100;
          },
          {
            joint = rShoulderPitch;
            s = 100;
          },
          {
            joint = rShoulderRoll;
            s = 100;
          },
          {
            joint = rElbowYaw;
            s = 100;
          },
          {
            joint = rElbowRoll;
            s = 100;
          }
        ];
        head = [
          -0,
          -30
        ];
        leftArm = [
          0,
          0.7,
          -123.67,
          -0.96,
          -89.12,
          0
        ];
        rightArm = [
          0,
          5.36,
          117.33,
          1.5,
          87.19,
          0
        ];
        leftLeg = [
          -54.24,
          -19.8,
          -87.05,
          97.72,
          -23.53,
          5
        ];
        rightLeg = [
          -54.24,
          19.37,
          -90.83,
          82.78,
          8,
          6.92
        ];
      },
      {
        phase = PushingWithArmsFromGround;
        duration = 250;
        goalCom = {
          x = 50;
          y = 0;
        };
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 10;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 1;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 1;
                  },
                  {
                    joint = lKneePitch;
                    addValue = 1;
                  },
                  {
                    joint = rKneePitch;
                    addValue = 1;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = lHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 10;
                jointPairs = [
                  {
                    joint = lAnklePitch;
                    addValue = 0.5;
                  }
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 10;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.5;
                  }
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 45;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [
          {
            joint = lShoulderPitch;
            s = 20;
          },
          {
            joint = lShoulderRoll;
            s = 20;
          },
          {
            joint = lElbowYaw;
            s = 20;
          },
          {
            joint = lElbowRoll;
            s = 20;
          },
          {
            joint = lWristYaw;
            s = 20;
          },
          {
            joint = lHand;
            s = 20;
          },
          {
            joint = rShoulderPitch;
            s = 20;
          },
          {
            joint = rShoulderRoll;
            s = 20;
          },
          {
            joint = rElbowYaw;
            s = 20;
          },
          {
            joint = rElbowRoll;
            s = 20;
          },
          {
            joint = rWristYaw;
            s = 20;
          },
          {
            joint = rHand;
            s = 20;
          }
        ];
        head = [
          -0,
          -30
        ];
        leftArm = [
          60,
          20,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          60,
          -20,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          -50,
          0,
          -70,
          100,
          -15,
          -5
        ];
        rightLeg = [
          -50,
          0,
          -70,
          100,
          -15,
          5
        ];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {
          x = 20;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -15;
                maxVal = -10;
                jointPairs = [
                  {
                    joint = lAnklePitch;
                    addValue = -0.7;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.7;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 40;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 1;
            },
            {
              joint = rHipPitch;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = -0.5;
            },
            {
              joint = lAnkleRoll;
              factor = 0.5;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          -0,
          -30
        ];
        leftArm = [
          60,
          20,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          60,
          -20,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          -40,
          0,
          -65,
          123,
          -35,
          -10
        ];
        rightLeg = [
          -40,
          0,
          -65,
          123,
          -35,
          10
        ];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 20;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 1;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 1;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -15;
                maxVal = -10;
                jointPairs = [
                  {
                    joint = lAnklePitch;
                    addValue = -0.7;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.7;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 40;
            isNot = true;
          }
        ];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 1;
            },
            {
              joint = rHipPitch;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = -0.5;
            },
            {
              joint = lAnkleRoll;
              factor = 0.5;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          -0,
          -30
        ];
        leftArm = [
          60,
          20,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          60,
          -20,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          -40,
          0,
          -65,
          123,
          -40,
          -10
        ];
        rightLeg = [
          -40,
          0,
          -65,
          123,
          -40,
          10
        ];
      },
      {
        phase = ReduceVel;
        duration = 25;
        goalCom = {
          x = 20;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = 10;
            higherFloat = 2000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -2000;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          -0,
          -30
        ];
        leftArm = [
          60,
          20,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          60,
          -20,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          -40,
          0,
          -80,
          123,
          -50,
          -10
        ];
        rightLeg = [
          -40,
          0,
          -80,
          123,
          -50,
          10
        ];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {
          x = 20;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 30;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 1;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 1;
                  }
                ];
                predictJointDif = true;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = -15;
                maxVal = -10;
                jointPairs = [
                  {
                    joint = lAnklePitch;
                    addValue = -0.7;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = headYaw;
                hipPitchDifferenceCompensation = true;
                minVal = 10;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.7;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.35;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.3;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          -15
        ];
        leftArm = [
          75,
          10.1,
          -100,
          -8.2,
          -90,
          0
        ];
        rightArm = [
          75,
          -10.1,
          100,
          8.2,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          -55,
          123,
          -67.8,
          0
        ];
        rightLeg = [
          0,
          0,
          -55,
          123,
          -67.8,
          0
        ];
      },
      {
        phase = Sit;
        duration = 200;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 1;
                maxVal = 25;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.75;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 0.75;
                  }
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [
          {
            variable = FluctuationY;
            lowerFloat = 0;
            higherFloat = 16.67;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          7,
          -80,
          -2.5,
          -90,
          0
        ];
        rightArm = [
          90,
          -7,
          80,
          2.5,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          -55,
          121,
          -67.8,
          0
        ];
        rightLeg = [
          0,
          0,
          -55,
          121,
          -67.8,
          0
        ];
      },
      {
        phase = Stand;
        duration = 500;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 30;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.6;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 0.6;
                  },
                  {
                    joint = lHipRoll;
                    addValue = 0.167;
                  },
                  {
                    joint = rHipRoll;
                    addValue = -0.167;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            },
            {
              joint = lKneePitch;
              factor = 0.8;
            },
            {
              joint = rKneePitch;
              factor = 0.8;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          20000,
          20000,
          0,
          20000,
          20000,
          20000
        ];
        rightArm = [
          20000,
          20000,
          0,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          0,
          0,
          -21.3,
          48.9,
          -27.6,
          0.1
        ];
        rightLeg = [
          0,
          0,
          -21.2,
          49,
          -27.6,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 160;
        y = -20;
      };
    };
    balanceOut = true;
    continueTo = front;
    clipAngle = -10deg;
  };
  back = {
    baseLimbStiffness = [
      20,
      60,
      60,
      90,
      90
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          119.02,
          38.41,
          2.11,
          -78.4,
          -90,
          0
        ];
        rightArm = [
          119.5,
          -50.19,
          -7.3,
          88.5,
          90,
          0
        ];
        leftLeg = [
          -0.69,
          3.48,
          20.61,
          88.48,
          7.18,
          4.54
        ];
        rightLeg = [
          -0.69,
          -0.33,
          23.13,
          86.84,
          4.99,
          -0.18
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          118.94,
          8.08,
          2.72,
          -71.98,
          -90,
          0
        ];
        rightArm = [
          119.5,
          -9.06,
          -5.01,
          72.86,
          90,
          0
        ];
        leftLeg = [
          -0.6,
          3.48,
          18.23,
          89.45,
          7.97,
          4.62
        ];
        rightLeg = [
          -0.6,
          -0.33,
          20.84,
          87.46,
          5.78,
          -0.1
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = true;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenLeftArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          },
          {
            variable = BrokenRightArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          65,
          50,
          2.72,
          -71.98,
          20000,
          20000
        ];
        rightArm = [
          65,
          -50,
          -2.72,
          71.98,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          118,
          50,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          118,
          -50,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenLeftArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          65,
          50,
          2.72,
          -71.98,
          20000,
          20000
        ];
        rightArm = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          1.23,
          29.62
        ];
        leftArm = [
          118,
          50,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 200;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenRightArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          65,
          -50,
          -2.72,
          71.98,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightArm = [
          118,
          -50,
          20000,
          20000,
          20000,
          20000
        ];
        leftLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
        rightLeg = [
          20000,
          20000,
          20000,
          20000,
          20000,
          20000
        ];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenRightArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          119.5,
          12,
          5,
          -85,
          -30,
          0
        ];
        rightArm = [
          10000,
          10000,
          10000,
          10000,
          10000,
          10000
        ];
        leftLeg = [
          0,
          20,
          15,
          25,
          50,
          0
        ];
        rightLeg = [
          0,
          0,
          25,
          35,
          50,
          0
        ];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          120,
          12,
          5,
          -85,
          -30,
          0
        ];
        rightArm = [
          10000,
          10000,
          10000,
          10000,
          10000,
          10000
        ];
        leftLeg = [
          0,
          15,
          -65,
          57,
          57,
          0
        ];
        rightLeg = [
          0,
          0,
          -65,
          57,
          57,
          0
        ];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenLeftArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = false;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          10000,
          10000,
          10000,
          10000,
          10000,
          10000
        ];
        rightArm = [
          119.5,
          -12,
          -5,
          85,
          30,
          0
        ];
        leftLeg = [
          0,
          0,
          25,
          35,
          50,
          0
        ];
        rightLeg = [
          0,
          -15,
          15,
          25,
          50,
          0
        ];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          10000,
          10000,
          10000,
          10000,
          10000,
          10000
        ];
        rightArm = [
          120,
          -12,
          -5,
          85,
          30,
          0
        ];
        leftLeg = [
          0,
          0,
          -65,
          57,
          57,
          0
        ];
        rightLeg = [
          0,
          -15,
          -65,
          57,
          57,
          0
        ];
      },
      {
        phase = ErrorPhase;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = true;
        isElseBlock = true;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [
          {
            variable = BrokenLeftArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = true;
          },
          {
            variable = BrokenLeftArm;
            lowerFloat = 0;
            higherFloat = 0;
            isNot = true;
          }
        ];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          119.5,
          12,
          5,
          -85,
          -30,
          0
        ];
        rightArm = [
          119.5,
          -12,
          -5,
          85,
          30,
          0
        ];
        leftLeg = [
          0,
          0,
          25,
          35,
          50,
          0
        ];
        rightLeg = [
          0,
          0,
          25,
          35,
          50,
          0
        ];
      },
      {
        phase = ArmPushing;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = true;
        forbidWaitBreak = true;
        jointCompensation = [];
        waitConditions = [
          {
            variable = InertialDataAngleY;
            lowerFloat = -70;
            higherFloat = 3000;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          120,
          12,
          5,
          -85,
          -30,
          0
        ];
        rightArm = [
          120,
          -12,
          -5,
          85,
          30,
          0
        ];
        leftLeg = [
          0,
          0,
          -55,
          57,
          57,
          0
        ];
        rightLeg = [
          0,
          0,
          -55,
          57,
          57,
          0
        ];
      },
      {
        phase = BackSitUp;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          115,
          0,
          20,
          -20,
          -30,
          0
        ];
        rightArm = [
          115,
          0,
          -20,
          20,
          30,
          0
        ];
        leftLeg = [
          -60,
          30,
          -90,
          87,
          44,
          4
        ];
        rightLeg = [
          -60,
          -24,
          -89,
          104,
          33,
          1
        ];
      },
      {
        phase = Splitt;
        duration = 250;
        goalCom = {
          x = -68;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          119.8,
          7.8,
          -71.1,
          -31.4,
          -90,
          0
        ];
        rightArm = [
          121.6,
          -0.4,
          87.5,
          22.2,
          90,
          0
        ];
        leftLeg = [
          -67.9,
          18.6,
          -91,
          75.5,
          51.6,
          -4.8
        ];
        rightLeg = [
          -67.9,
          -10.7,
          -91,
          73,
          52.2,
          7.6
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 50;
        y = 70;
      };
    };
    balanceOut = false;
    continueTo = fromSplit;
    clipAngle = 10deg;
  };
  fromSplit = {
    baseLimbStiffness = [
      30,
      40,
      40,
      100,
      100
    ];
    lines = [
      {
        phase = HalfSplitt;
        duration = 400;
        goalCom = {
          x = -20;
          y = 3.5;
        };
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          115.8,
          -7.6,
          -84.6,
          -15.9,
          -90,
          0
        ];
        rightArm = [
          120.7,
          -39.7,
          99.4,
          8.2,
          90,
          0
        ];
        leftLeg = [
          -65.5,
          11.6,
          -35,
          123,
          -30.1,
          -10
        ];
        rightLeg = [
          -65.5,
          -30,
          -88,
          48.7,
          52.8,
          0
        ];
      },
      {
        phase = HalfSplitt;
        duration = 17;
        goalCom = {
          x = -20;
          y = 3.5;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          30
        ];
        leftArm = [
          115.8,
          -7.6,
          -84.6,
          -15.9,
          -90,
          0
        ];
        rightArm = [
          120.7,
          -39.7,
          99.4,
          8.2,
          90,
          0
        ];
        leftLeg = [
          -65.5,
          11.6,
          -35,
          123,
          -30.1,
          -10
        ];
        rightLeg = [
          -65.5,
          -30,
          -88,
          54.7,
          52.8,
          0
        ];
      },
      {
        phase = Splitt;
        duration = 300;
        goalCom = {
          x = -10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.53;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = 0.53;
                  },
                  {
                    joint = rAnklePitch;
                    addValue = 0.467;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.53;
                  }
                ];
                predictJointDif = false;
              },
              {
                jointDelta = rKneePitch;
                hipPitchDifferenceCompensation = false;
                minVal = 35;
                maxVal = 36;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.5;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = -0.5;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          30,
          -50,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -30,
          50,
          0,
          90,
          0
        ];
        leftLeg = [
          -40,
          6.5,
          -60,
          123,
          -33,
          -14
        ];
        rightLeg = [
          -40,
          -30,
          -87,
          160,
          -17,
          22
        ];
      },
      {
        phase = Splitt;
        duration = 100;
        goalCom = {
          x = -10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.53;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = 0.53;
                  },
                  {
                    joint = rAnklePitch;
                    addValue = 0.467;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.53;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.2;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          30,
          -50,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -30,
          50,
          0,
          90,
          0
        ];
        leftLeg = [
          -40,
          6.5,
          -60,
          123,
          -33,
          -10
        ];
        rightLeg = [
          -40,
          -15,
          -87,
          123,
          -17,
          10
        ];
      },
      {
        phase = Splitt;
        duration = 300;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 15;
                jointPairs = [
                  {
                    joint = lHipRoll;
                    addValue = -0.333;
                  },
                  {
                    joint = lHipPitch;
                    addValue = 0.533;
                  },
                  {
                    joint = lAnklePitch;
                    addValue = 0.4;
                  },
                  {
                    joint = lAnkleRoll;
                    addValue = 0.4;
                  },
                  {
                    joint = rHipRoll;
                    addValue = 0.333;
                  },
                  {
                    joint = rAnklePitch;
                    addValue = 0.67;
                  },
                  {
                    joint = rAnkleRoll;
                    addValue = -0.6;
                  }
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 4;
                maxVal = 8;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.52;
                  }
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 1;
            },
            {
              joint = rHipPitch;
              factor = 1;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          30,
          -50,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -30,
          50,
          0,
          90,
          0
        ];
        leftLeg = [
          -40,
          0,
          -60,
          123,
          -41,
          0
        ];
        rightLeg = [
          -40,
          0,
          -60,
          123,
          -41,
          0
        ];
      },
      {
        phase = ReduceVel;
        duration = 300;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 25;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.867;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 0.867;
                  }
                ];
                predictJointDif = true;
              },
              {
                jointDelta = rHipPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 5;
                maxVal = 8;
                jointPairs = [
                  {
                    joint = rAnklePitch;
                    addValue = 0.4;
                  }
                ];
                predictJointDif = false;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            }
          ];
          jointX = [];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          15,
          -30,
          -2.5,
          -90,
          0
        ];
        rightArm = [
          90,
          -15,
          30,
          2.5,
          90,
          0
        ];
        leftLeg = [
          0,
          -5,
          -53,
          123,
          -67.8,
          0
        ];
        rightLeg = [
          0,
          5,
          -53,
          123,
          -67.8,
          0
        ];
      },
      {
        phase = Sit;
        duration = 200;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 0;
                maxVal = 25;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.867;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 0.867;
                  }
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [
          {
            variable = FluctuationY;
            lowerFloat = 0;
            higherFloat = 16.67;
            isNot = false;
            maxWaitTime = 1000;
          }
        ];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            },
            {
              joint = lKneePitch;
              factor = 0.8;
            },
            {
              joint = rKneePitch;
              factor = 0.8;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          7,
          -20,
          -2.5,
          -90,
          0
        ];
        rightArm = [
          90,
          -7,
          20,
          2.5,
          90,
          0
        ];
        leftLeg = [
          0,
          -5,
          -53,
          121,
          -67.8,
          0
        ];
        rightLeg = [
          0,
          5,
          -53,
          121,
          -67.8,
          0
        ];
      },
      {
        phase = Stand;
        duration = 500;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [
          {
            jointCompensationParams = [
              {
                jointDelta = lHipYawPitch;
                hipPitchDifferenceCompensation = false;
                minVal = 15;
                maxVal = 30;
                jointPairs = [
                  {
                    joint = lHipPitch;
                    addValue = 0.3;
                  },
                  {
                    joint = rHipPitch;
                    addValue = 0.3;
                  }
                ];
                predictJointDif = true;
              }
            ];
            reduceFactorJointCompensation = 0.4;
          }
        ];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            },
            {
              joint = lKneePitch;
              factor = 0.8;
            },
            {
              joint = rKneePitch;
              factor = 0.8;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          7,
          0,
          -2.5,
          -90,
          0
        ];
        rightArm = [
          90,
          -7,
          0,
          2.5,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          -21.3,
          48.9,
          -27.6,
          0
        ];
        rightLeg = [
          0,
          0,
          -21.2,
          49,
          -27.6,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = true;
    continueTo = fromSplit;
    clipAngle = 0deg;
  };
  recoverFast = {
    baseLimbStiffness = [
      0,
      30,
      30,
      90,
      90
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 400;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          90,
          0,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -90,
          0,
          0,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
        rightLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = recoverFast;
    clipAngle = 0deg;
  };
  recoverFromSideBack = {
    baseLimbStiffness = [
      0,
      30,
      20,
      30,
      30
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          90,
          0,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -90,
          -0,
          -0,
          90,
          0
        ];
        leftLeg = [
          0,
          -0,
          40,
          0,
          0,
          -0
        ];
        rightLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = recoverFromSideBack;
    clipAngle = 0deg;
  };
  recoverFromSideFront = {
    baseLimbStiffness = [
      0,
      30,
      20,
      30,
      30
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 1000;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          90,
          0,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -90,
          -0,
          -0,
          90,
          0
        ];
        leftLeg = [
          0,
          -0,
          -30,
          0,
          0,
          -0
        ];
        rightLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = recoverFromSideFront;
    clipAngle = 0deg;
  };
  recoverArmLeftFrontLyingOn = {
    baseLimbStiffness = [
      0,
      40,
      40,
      70,
      70
    ];
    lines = [
      {
        phase = ErrorPhase;
        duration = 800;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          63.5,
          21.6,
          0,
          -82.5,
          -27.6,
          0
        ];
        rightArm = [
          63.5,
          -21.6,
          0,
          82.5,
          27.6,
          0
        ];
        leftLeg = [
          -30,
          -10,
          -14,
          3.4,
          -66,
          0
        ];
        rightLeg = [
          -30,
          10,
          -14,
          3.4,
          -66,
          0
        ];
      },
      {
        phase = ErrorPhase;
        duration = 500;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          10.1,
          -90,
          -8.2,
          -90,
          0
        ];
        rightArm = [
          90,
          -10.1,
          90,
          8.2,
          90,
          0
        ];
        leftLeg = [
          -29,
          -13,
          -51,
          -1.7,
          -32,
          5
        ];
        rightLeg = [
          -29,
          13,
          -51,
          -1.7,
          -32,
          -5
        ];
      },
      {
        phase = ErrorPhase;
        duration = 800;
        goalCom = {
          x = 0;
          y = 0;
        };
        setLastCom = false;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [];
          jointX = [];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          20000,
          20000
        ];
        leftArm = [
          90,
          90,
          0,
          0,
          -90,
          0
        ];
        rightArm = [
          90,
          -90,
          0,
          0,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
        rightLeg = [
          0,
          0,
          0,
          0,
          0,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = recoverArmLeftFrontLyingOn;
    clipAngle = 0deg;
  };
  stand = {
    baseLimbStiffness = [
      40,
      75,
      75,
      75,
      75
    ];
    lines = [
      {
        phase = Stand;
        duration = 2000;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            },
            {
              joint = lKneePitch;
              factor = 0.7;
            },
            {
              joint = rKneePitch;
              factor = 0.7;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = true;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          7,
          0,
          -2.5,
          -90,
          0
        ];
        rightArm = [
          90,
          -7,
          0,
          2.5,
          90,
          0
        ];
        leftLeg = [
          0,
          -0,
          -23.2,
          52.5,
          -29.2,
          -0
        ];
        rightLeg = [
          0,
          0,
          -23.2,
          52.5,
          -29.2,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = true;
    continueTo = stand;
    clipAngle = 0deg;
  };
  sit = {
    baseLimbStiffness = [
      20,
      50,
      50,
      50,
      50
    ];
    lines = [
      {
        phase = Sit;
        duration = 1000;
        goalCom = {
          x = 10;
          y = 0;
        };
        setLastCom = true;
        optionalLineAnds = false;
        isElseBlock = false;
        isPartOfPreviousOptionalLine = false;
        forbidWaitBreak = false;
        jointCompensation = [];
        waitConditions = [];
        conditions = [];
        balanceWithJoints = {
          jointY = [
            {
              joint = lAnklePitch;
              factor = 1;
            },
            {
              joint = rAnklePitch;
              factor = 1;
            },
            {
              joint = lHipPitch;
              factor = 0.5;
            },
            {
              joint = rHipPitch;
              factor = 0.5;
            },
            {
              joint = lKneePitch;
              factor = 0.2;
            },
            {
              joint = rKneePitch;
              factor = 0.2;
            }
          ];
          jointX = [
            {
              joint = lAnkleRoll;
              factor = 1;
            },
            {
              joint = rAnkleRoll;
              factor = 1;
            }
          ];
        };
        balancerActive = false;
        singleMotorStiffnessChange = [];
        head = [
          0,
          0
        ];
        leftArm = [
          90,
          10.1,
          -90,
          -8.2,
          -90,
          0
        ];
        rightArm = [
          90,
          -10.1,
          90,
          8.2,
          90,
          0
        ];
        leftLeg = [
          0,
          0,
          -50,
          121.1,
          -67.8,
          0
        ];
        rightLeg = [
          0,
          0,
          -50,
          121.1,
          -67.8,
          0
        ];
      }
    ];
    odometryOffset = {
      rotation = 0deg;
      translation = {
        x = 0;
        y = 0;
      };
    };
    balanceOut = false;
    continueTo = stand;
    clipAngle = 0deg;
  };
};
brokenJointData = {
  headYaw = 50;
  headPitch = 50;
  lShoulderPitch = 20;
  lShoulderRoll = 20;
  lElbowYaw = 20;
  lElbowRoll = 20;
  lWristYaw = 200;
  lHand = 20;
  rShoulderPitch = 20;
  rShoulderRoll = 20;
  rElbowYaw = 20;
  rElbowRoll = 20;
  rWristYaw = 200;
  rHand = 20;
  lHipYawPitch = 20;
  lHipRoll = 20;
  lHipPitch = 30;
  lKneePitch = 20;
  lAnklePitch = 20;
  lAnkleRoll = 20;
  rHipYawPitch = 20;
  rHipRoll = 20;
  rHipPitch = 30;
  rKneePitch = 20;
  rAnklePitch = 20;
  rAnkleRoll = 20;
};
headInterpolation = {
  ErrorPhase = 0;
  Lying = 0;
  ArmPushing = 0;
  BackSitUp = 0;
  PushingWithArmsFromGround = 0;
  ReduceVel = 0;
  Splitt = 0;
  HalfSplitt = 0;
  Sit = 0.2;
  HighSitVel = 0;
  Stand = 1;
};
minJointCompensationReduceAngleDif = 0.5deg;
jointCompensationSimulationFactor = 0.3;
clipBreakUpAngle = [
  ErrorPhase,
  ArmPushing,
  PushingWithArmsFromGround
];
balanceOutParams = {
  maxTime = 1500;
  minFluctuation = 33deg;
  minForwardAngle = 7deg;
  minBackwardAngle = -2deg;
  minPIDDValue = 60;
};
supportPolygonOffsets = {
  x = 70;
  y = -40;
  z = 40;
};
